//=== 4-3. 멘토링 ===
// 현수네 반 선생님은 반 학생들의 수학점수를 향상시키기 위해 멘토링 시스템을 만들려고 합니다.
// 멘토링은 멘토(도와주는 학생)와 멘티(도움을 받는 학생)가 한 짝이 되어 멘토가 멘티의 수학공부를 도와주는 것입니다.
// 선생님은 M번의 수학테스트 등수를 가지고 멘토와 멘티를 정합니다.
// 만약 A학생이 멘토이고, B학생이 멘티가 되는 짝이 되었다면,
// A학생은 M번의 수학테스트에서 모두 B학생보다 등수가 앞서야 합니다.
// M번의 수학성적이 주어지면 멘토와 멘티가 되는 짝을 만들 수 있는 경우가 총 몇 가지 인지 출력하는 프로그램을 작성하세요.

// ▣ 입력설명
// 첫 번째 줄에 반 학생 수 N(1<=N<=20)과 M(1<=M<=10)이 주어진다.
// 두 번째 줄부터 M개의 줄에 걸쳐 수학테스트 결과가 학생번호로 주어진다. 학생번호가 제일 앞에서부터 1등, 2등, ...N등 순으로 표현된다.
// 만약 한 줄에 N=4이고, 테스트 결과가 3 4 1 2로 입력되었다면 3번 학생이 1등, 4번 학생이 2등, 1번 학생이 3등, 2번 학생이 4등을 의미합니다.

// ▣ 출력설명
// 첫 번째 줄에 짝을 만들 수 있는 총 경우를 출력합니다.

// ▣ 입력예제 1
// 4 3
// 3412 4321 3142

// ▣ 출력예제 1
// 3
// (3, 1), (3, 2), (4, 2)와 같이 3가지 경우의 (멘토, 멘티) 짝을 만들 수 있다.

function solution(test) {
  let answer = 0;
  m = test.length; // 행의 개수 (3)
  n = test[0].length; // 열의 개수 (4)

  // 완전탐색 - 4중 for문 돌면서 경우의 수 전부 확인
  for (let i = 1; i <= n; i++) {
    // i : 1 ~ n
    for (let j = 1; j <= n; j++) {
      // j : 1 ~ n
      // i, j (2중 for문) : 멘토, 멘티 결정

      let cnt = 0; // 초기화
      for (let k = 0; k < m; k++) {
        // m = test.length; (4)

        let pi = (pj = 0);
        // pi : i의 등수
        // pj : j의 등수

        // i가 3이고, j가 1이라면
        //     0   1   2   3 (등수)
        //   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        // 0 | 3(i) 4 1(j) 2
        // 1 | 4  3(i) 2  1(j)
        // 2 | 3(i) 1(j) 4 2
        // 2차원 배열
        for (let s = 0; s < n; s++) {
          // n = test[0].length; (3)
          if (test[k][s] === i) pi = s; // idx
          if (test[k][s] === j) pj = s; // idx
        }
        if (pi < pj) cnt++; // "i 학생(멘토) 등수 < j 학생(멘티) 등수" 라면 (테스트 통과 시), cnt++
        // A학생이 멘토이고, B학생이 멘티가 되는 짝이 되었다면,
        // A학생은 M번의 수학테스트에서 모두 B학생보다 "등수가 앞서야 합니다."
      }
      if (cnt === m) answer++;
      // m = test.length; (4)
      // cnt가 4라면 (모든 테스트 통과 했다면, 모든 조건 만족하는 1가지 경우 생성)
    }
  }
  return answer;
}

let arr = [
  [3, 4, 1, 2],
  [4, 3, 2, 1],
  [3, 1, 4, 2],
];
console.log(solution(arr));
